library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
USE ieee.numeric_std.ALL;

-- A 16x8 single-port RAM 
entity RAM is
port(
-- Inputs
 Data_addr:   in std_logic_vector(3 downto 0); -- Address to write/read RAM
-- Ram_data_in: in std_logic_vector(7 downto 0); -- Data to write into RAM
 We_DM:       in std_logic; -- Write enable 
 --RAM_CLOCK:    in std_logic; -- clock input for RAM
 Load_DM:      in std_logic:='0';
 ALU_out:      in std_logic_vector (7 downto 0);
 EXT_Data_in:   in std_logic_vector (7 downto 0);
 Ram_data_in: inout std_logic_vector (7 downto 0);
 
 -- Output 
 Ram_data_out: out std_logic_vector(7 downto 0) -- Data output of RAM
 
);
end RAM;

architecture rtl of RAM is
-- define the new type for the 128x8 RAM 
type RAM_ARRAY is array (0 to 15 ) of std_logic_vector (7 downto 0);
-- initial values in the RAM
signal RAM_memory: RAM_ARRAY :=(

    b"00000000",    --000
    b"00000001",    --1   
    b"00000010",    --2
    b"00000011",    --3 
    b"00000000",    --4
    b"00000001",    --5
    b"00000010",    --6
    b"00000011",    --7
    b"00000000",    --8
    b"00000001",    --9
    b"00000010",    --10
    b"00000011",    --11
    b"00000000",    --12
    b"00000001",    --13
    b"00000010",    --14
    b"11000011"     --15
   
   ); 
--signal Ram_data_in: std_logic_vector (7 downto 0);

   
begin

--MUX declaration
Ram_data_in<=
             ALU_out WHEN (Load_DM='1') else
             EXT_Data_in WHEN (Load_DM='0');


process(We_DM)
begin

 if(We_DM='1') then -- when write enable = 1, 
 -- write input data into RAM at the provided address
 
 RAM_memory(to_integer(unsigned(Data_addr))) <= RAM_DATA_IN;
 -- The index of the RAM array type needs to be integer so
 -- converts RAM_ADDR from std_logic_vector -> Unsigned -> Interger using numeric_std library

 end if;
 
end process;
  Ram_data_out <= RAM_memory(to_integer(unsigned(Data_addr)));-- Data to be read out 
 
end rtl;
