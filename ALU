library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
--use IEEE.std_logic_signed.all; using signed library causes problem
USE ieee.std_logic_unsigned.all; -- allows numerical operations (+, -)


ENTITY ALU IS
 PORT (
-- I/O declaration
 Acc_in:        IN STD_LOGIC_VECTOR (7 DOWNTO 0);          -- input to accumulator
 Data_Reg_in:   IN STD_LOGIC_VECTOR (7 DOWNTO 0);          -- input to data register
 Opcode_in:     IN STD_LOGIC_VECTOR (3 DOWNTO 0);          -- selector input
 
 --Flag output
 ZFL: OUT STD_LOGIC;             -- Acc=0
 OVR: OUT STD_LOGIC;             -- Acc overflow
 AED: OUT STD_LOGIC;             -- Acc=Data-Reg
 
 --Outputs 
 Q :            OUT std_logic_vector(7 downto 0);           --Accumulator output
 Ext_Data_Out:  OUT std_logic_vector(7 downto 0)           --external output of ALU

 );                             
END ALU;

ARCHITECTURE rtl OF ALU IS -- register transfer level

--signal declaration.
signal a_in :     STD_LOGIC_VECTOR(7 downto 0);                  --accumulator unsigned signal
signal d_in :     STD_LOGIC_VECTOR(7 downto 0);                  -- data_reg unsigned signal
signal arith_out: STD_LOGIC_VECTOR(7 downto 0);				     -- Arith. unit resultsignal 
signal logic_out: STD_LOGIC_VECTOR(7 downto 0);	                 -- Logic  unit result
signal multi:     std_logic_vector (15 downto 0);               -- multiplication variable
signal reset:     std_logic_vector(7 downto 0):="00000000";      -- reset signal declaration with set value
signal set:       std_logic_vector(7 downto 0):="11111111"; 
signal y:         std_logic_vector(7 downto 0);	                 -- Global output buffer


begin

a_in <= Acc_in;      --ACC in signal
d_in <= Data_Reg_in; -- Data_reg a_in
Q<=y;
Ext_Data_Out<=y;

 
WITH Opcode_in(3 DOWNTO 0) SELECT
 arith_out <= 
             reset WHEN "0000",
             set   WHEN "1001",
             a_in +'1' WHEN "0001",
             a_in + d_in WHEN "0010",
             a_in - d_in WHEN "0011",
             reset  WHEN OTHERS;

WITH Opcode_in (3 DOWNTO 0) SELECT
multi <=     a_in * d_in  WHEN "0100",
             reset  WHEN OTHERS;  
             
WITH Opcode_in (3 DOWNTO 0) SELECT
logic_out <=  
             a_in nand d_in WHEN "0111",
             a_in xor d_in WHEN "1000",
            std_logic_vector(shift_left(unsigned(a_in), to_integer(unsigned(Opcode_in)))) WHEN "0101",
            std_logic_vector(shift_right(unsigned(a_in), to_integer(unsigned(Opcode_in)))) WHEN "0110",
             reset WHEN OTHERS;
            
 WITH Opcode_in(3 DOWNTO 0) SELECT
 y <= 
      arith_out WHEN "0000" | "1001" | "0001" | "0010" | "0011",
      logic_out WHEN "0111"| "1000"| "0101"| "0110",
      multi WHEN "0100",
      set WHEN OTHERS; -- reset when other states
      
-- OVR process
PROCESS(Opcode_in)
 BEGIN
 CASE Opcode_in IS
 
    WHEN "0010" =>-- Addition Overflow a_in + a_in
        IF ((a_in(7) = '1') and (d_in(7) = '1') and (arith_out(7) = '0')) THEN 
            OVR <= '1';
       ELSIF ((a_in(7) = '0') and (d_in(7) = '0') and (arith_out(7) = '1')) THEN 
           OVR <= '1';
        ELSE
            OVR <= '0';
        END IF;
        
    WHEN "0011" => -- Subtraction overflow
        IF   ((a_in(7) = '0') and (d_in(7) ='1') and (arith_out(7) = '1')) THEN 
            OVR <= '1';
        ELSIF ((a_in(7) = '1') and (d_in(7) = '0') and (arith_out(7) = '0')) THEN 
            OVR <= '1';
        ELSE
            OVR <= '0';
        END IF;   
        WHEN OTHERS => OVR <= '0';
        
    END CASE;
END PROCESS;
    
-- ZFL flag process 
PROCESS (Acc_in)
 BEGIN 
        If Acc_in = "00000000" THEN 
        ZFL<='1';
   ELSE 
        ZFL<='0';
   END IF;
END PROCESS;

--Acc=Data_Reg flag process
PROCESS (Acc_in, Data_Reg_in)
 BEGIN 
        If Acc_in = Data_Reg_in THEN 
        AED<='1';
   ELSE 
        AED<='0';
   END IF;
END PROCESS;
 
 end architecture rtl;  
