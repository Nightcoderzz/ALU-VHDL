library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
USE ieee.std_logic_unsigned.all; -- allows numerical operations (+, -)


ENTITY ALU_TB IS
            
END ALU_TB;

ARCHITECTURE rtl OF ALU_TB IS -- register transfer level


component ALU is
PORT (
-- I/O declaration
 Acc_in:        IN STD_LOGIC_VECTOR (7 DOWNTO 0);          -- input to accumulator
 Data_Reg_in:   IN STD_LOGIC_VECTOR (7 DOWNTO 0);          -- input to data register
 Opcode_in:     IN STD_LOGIC_VECTOR (3 DOWNTO 0);          -- selector input
 Execute:       IN std_logic:='1';                         -- deafult execute is on
 Reset:         IN std_logic:='0';
 Q :            OUT std_logic_vector(7 downto 0);           --Accumulator output
 --Ext_Data_Out:  OUT std_logic_vector(7 downto 0);          --external output of ALU

 --Flag output
 ZFL:           OUT STD_LOGIC;             -- Acc=0
 OVR:           OUT STD_LOGIC;            -- Acc overflow
 AED:           OUT STD_LOGIC             -- Acc=Data_Reg
     );                  
end component;

--signal declaration.

signal zero:        std_logic_vector(7 downto 0):="00000000";      -- reset signal declaration with set value
signal set:          std_logic_vector(7 downto 0):="11111111"; 
signal Opcode_in:    STD_LOGIC_VECTOR (3 DOWNTO 0);          -- selector input
signal Q :           std_logic_vector(7 downto 0);           --Accumulator output
--signal Ext_Data_Out: std_logic_vector(7 downto 0);           --external output of ALU
signal Acc_in:       STD_LOGIC_VECTOR (7 downto 0);
signal Data_Reg_in:  STD_LOGIC_VECTOR(7 downto 0);
signal a_in:         std_logic_vector(7 downto 0);
signal d_in:         std_logic_vector(7 downto 0);
signal multi:        std_logic_vector (15 downto 0);
signal OVR:          STD_LOGIC;
signal ZFL:          STD_LOGIC;             -- Acc=0
signal AED:          STD_LOGIC;              -- Acc=Data-Reg
signal Execute:      std_logic:='1';
signal Reset:        std_logic:='0';

begin

uut: ALU PORT MAP (

Acc_in=>Acc_in,
Data_Reg_in=>Data_Reg_in,
Q =>Q,
Opcode_in => Opcode_in,
OVR=>OVR,
ZFL=>ZFL,
AED=>AED,
Execute=>Execute,
Reset=>Reset


--Q=>Ext_Data_Out



);
 
-- Stimulus process
 stim_proc: process
 begin
-- stimulus 
 
Acc_in <= "11111111";
Data_Reg_in<= "10000001";

  
 Opcode_in <= "0111";
 wait for 100 ns;
 Opcode_in <= "1000";
 wait for 100 ns;
 Opcode_in <= "0101";
 wait for 100 ns;
 Opcode_in <= "0110";
 wait for 100 ns;
Opcode_in <= "0000";
 wait for 100 ns;
Opcode_in <= "0001";
 wait for 100 ns;
 Opcode_in <= "0010";
 wait for 100 ns;
 Opcode_in <= "0011";
 wait for 100 ns;
 Opcode_in <= "0100";
 wait for 100 ns;
